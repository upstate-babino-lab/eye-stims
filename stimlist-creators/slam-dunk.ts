#!/usr/bin/env ts-node
/*
  The simplest possible stimulus sequence generator for testing.
  Creates a sequence of alerting black and white screens with black tails of random duration.
  Analysis of the resulting spike trains should be a trivial slam-dunk
*/

import {
  addIntegrityFlashes,
  addRestPeriods,
  shuffle,
} from '../src/stims/stim-utils';
import { filterPrivateAndNullProperties } from '../src/shared-utils';
import { Solid } from '../src/stims/';

if (process.argv.length < 4) {
  console.error(`Usage: ${process.argv[1]} <title> <nStimuli>`);
  process.exit(-1);
}
const title = process.argv[2];
const nStimuli = +process.argv[3];
let stimuli = new Array(nStimuli);

const [BODY_MS, MAX_MS] = [260, 1000]; // Must both be multiples of 20
let [minDurationMs, maxDurationMs] = [0, 0];
for (let i = 0; i < nStimuli; i++) {
  // Random tail duration at least BODY_MS and at most MAX_MS - BODY_MS
  const maxExtraTailFrames = (MAX_MS - BODY_MS * 2) / 20;
  const randExtraTailFrames = Math.floor(Math.random() * (maxExtraTailFrames + 1));
  const durationMs = BODY_MS + BODY_MS + randExtraTailFrames * 20;
  // console.error(`>>>>> Stim ${i} d=${durationMs}ms t=${durationMs - BODY_MS}ms`);
  if (durationMs > maxDurationMs) {
    maxDurationMs = durationMs;
  }
  if (durationMs < minDurationMs || minDurationMs === 0) {
    minDurationMs = durationMs;
  }

  const stim = new Solid({
    durationMs: durationMs,
    bodyMs: BODY_MS,
    bgColor: i % 2 ? 'black' : 'white', // Alternating black and white
  });
  stimuli[i] = stim;
}

// Should range from 520ms to 1000ms
console.error(`>>>>> Durations max=${maxDurationMs}ms, min=${minDurationMs}ms`);

stimuli = shuffle(stimuli);
stimuli = addRestPeriods(stimuli, 2, 2); // Black every 2 minutes, each 2 minutes long
stimuli = addIntegrityFlashes(stimuli); // Add integrity flashes at start and end only

console.log(
  JSON.stringify(
    {
      title: title,
      description: `Generated by ${process.argv[1]} ${title} ${nStimuli}`,
      stimuli: stimuli,
    },
    filterPrivateAndNullProperties,
    4
  )
);
